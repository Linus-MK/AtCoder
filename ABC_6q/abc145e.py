# dp[i][t] := 料理がi種類目まで、制限時間t分のときの答え

# dp[i][t] = 
#   i種類目を使わない：dp[i-1][t]
#   i種類目を使う：dp[] あれ?注文はできないが食べるのはできるルールが難しいよ。

# brute-force型（料理の部分集合を全通り考える）だとどういう計算になる?
# 料理の集合がわかっていれば、食べる時間が最大のものを一番後回しにするのが最善（時間が最短で済む）
# 最大を除外した時間の和 <= 制限時間 - 1ならOK、そのうち満足度最大のものが答え
# （もちろん実際にやるとTLEになる）
# じゃあ食べる時間が小→大にソートしてから……いやそれでも、それまでの最後を食べるのに何分かかるかが分からないと無理だ。

