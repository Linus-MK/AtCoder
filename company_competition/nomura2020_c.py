# なるべく根本に近いところで枝分かれさせたい。
# 根から葉に向かって考えると「ここで枝分かれするべきか?」の答えがその先（つまりもっと葉側）を読まなければいけないので厄介
# だが実はそれは「その先の葉の個数の合計」だけ見れば良い。できそう。
# 葉から根に向かって考えると「ここで枝を統合するべきか?」の答えがその先（つまりもっと根側）を読まなければいけないので厄介
# これは根本近くのどの位置に数字があるかに依存して変わるから難しい。
# 根から考えるのが良さそう。

n = int(input())
nums = list(map(int, input().split()))

# コーナーケース先に潰しておこう
if n == 0:
    if nums[0] == 1:
        print(1)
    else:
        print(-1)
    exit()
if n > 0 and nums[0] >= 1:
    print(-1)
    exit()

# 根から葉に向かう

rest = sum(nums)

n_node = 1
ans = 1
for i in range(1, n+1):
    # なるべく根本に近いところで枝分かれさせたい。
    # 「ここで枝分かれするべきか?」→基本的にはそう。しかしその先の葉の合計を超えてはいけない。
    n_node = min(n_node * 2, rest)
    ans += n_node

    # 葉を引く
    n_node -= nums[i]
    rest -= nums[i]

    # 負ならダメ 0 0 5とか
    if n_node < 0:
        print(-1)
        exit()
    # 最後ではないのに0になったらダメ 0 0 4 1とか
    if n_node == 0 and i < n:
        print(-1)
        exit()

print(ans)
